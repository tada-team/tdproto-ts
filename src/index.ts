// Autogenerated. Do not edit.
declare namespace TdProto {
	
   /**
    * Contact, group or task id
    */
   type JID = string;

   /**
    * Task tab name
    */
   type TaskTabKey = string;

   /**
    * Chat type
    */
   const enum ChatType {
      DIRECT = 'direct',
      GROUP = 'group',
      TASK = 'task',
   }

   /**
    * Contact status in team
    */
   const enum TeamStatus {
      OWNER = 'owner',
      ADMIN = 'admin',
      MEMBER = 'member',
      GUEST = 'guest',
	}

   /**
    * Contact status in group
    */
   const enum GroupStatus {
      ADMIN = 'admin',
      MEMBER = 'member',
   }

   /**
    * Message type
    */
   const enum Mediatype {
      PLAIN = 'plain',
      CHANGE = 'change',
      DELETED = 'deleted',
      FILE = 'file',
      IMAGE = 'image',
      VIDEO = 'video',
      AUDIOMSG = 'audiomsg',
      CONTACT = 'contact',
      PDF = 'pdf',
   }

   /**
    * Message type
    */
   const enum Mediasubtype {
      STICKER = 'sticker',
      NEWTASK = 'newtask',
   }

   type MessageLinks = MessageLink[];
   
   type TeamUnread = [ChatType:Unread]
   /**
    * Team.
    */
   export interface Team {
      /**
      * Team id.
      */
      uid: string;

      /**
      * Team deleted.
      */
      isArchive: boolean;

      /**
      * Object version.
      */
      gentime: number;

      /**
      * Team name.
      */
      name: string;

      /**
      * Default task deadline.
      */
      defaultTaskDeadline: string;

      /**
      * Max message update/deletion age, in seconds.
      */
      maxMessageUpdateAge: number;

      /**
      * Team icons.
      */
      icons: IconData;

      /**
      * User last activity was in this team.
      */
      lastActive: boolean;

      /**
      * What status I can set to other team mebers.
      */
      changeableStatuses: TeamStatus[];

      /**
      * My profile in this team isn't full.
      */
      badProfile: boolean;

      /**
      * Neet confirmation after invite to this team.
      */
      needConfirmation: boolean;

      /**
      * Patronymic in usernames for this team.
      */
      usePatronymic: boolean;

      /**
      * Username fields ordering.
      */
      userFields: string[];

      /**
      * Family name should be first in display name.
      */
      displayFamilyNameFirst: boolean;

      /**
      * Use importance field in task.
      */
      useTaskImportance: boolean;

      /**
      * Minimal value of task imporance. Default is 1.
      */
      taskImportanceMin: number;

      /**
      * Maximum value of task imporance. Default is 5.
      */
      taskImportanceMax: number;

      /**
      * Bigger number = bigger importance. Default: lower number = bigger importance.
      */
      taskImportanceRev: boolean;

      /**
      * Use urgency field in task.
      */
      useTaskUrgency: boolean;

      /**
      * Use complexity field in task.
      */
      useTaskComplexity: boolean;

      /**
      * Use spent time field in task.
      */
      useTaskSpentTime: boolean;

      /**
      * Total uploads size, bytes.
      */
      uploadsSize: number;

      /**
      * Maximum uploads size, bytes, if any.
      */
      uploadsSizeLimit: number;

      /**
      * Unread message counters.
      */
      unreads: TeamUnread | null;

      /**
      * My profile in this team.
      */
      me: Contact;

      /**
      * Team contacts. Used only for team creation.
      */
      contacts: Contact[];

      /**
      * For single group teams, jid of chat.
      */
      singleGroup: JID | null;

      /**
      * Color theme, if any.
      */
      theme: Theme | null;

      /**
      * Don't show archived users by default.
      */
      hideArchivedUsers: boolean;

   }

   /**
    * Short team representation. For invites, push notifications, etc.
    */
   export interface TeamShort {
      /**
      * Team id.
      */
      uid: string;

      /**
      * Team name.
      */
      name: string;

      /**
      * Team icons.
      */
      icons: IconData;

   }

   /**
    * Team deletion message.
    */
   export interface DeletedTeam {
      /**
      * Team id.
      */
      uid: string;

      /**
      * Team deleted.
      */
      isArchive: boolean;

      /**
      * Object version.
      */
      gentime: number;

   }

   /**
    * Task color rules color.
    */
   export interface TaskColor {
      /**
      * Regular.
      */
      regular: string;

      /**
      * Dark.
      */
      dark: string;

      /**
      * Light.
      */
      light: string;

   }

   /**
    * Wiki page. Experimental.
    */
   export interface WikiPage {
      /**
      * Object version.
      */
      gentime: number;

      /**
      * Update time, iso.
      */
      updated: string;

      /**
      * Last editor contact id.
      */
      editor: JID;

      /**
      * Page text.
      */
      text: string;

   }

   /**
    * Unread message counters.
    */
   export interface Unread {
      /**
      * Total unread messages.
      */
      numMessages: number;

      /**
      * Total unread messages with mentions.
      */
      numNoticeMessages: number;

      /**
      * Total chats with unread messages.
      */
      numChats: number;

   }

   /**
    * Unread message counters.
    */
   export interface TeamCounter {
      /**
      * Team id.
      */
      uid: string;

      /**
      * Unread message counters.
      */
      unreads: TeamUnread;

   }

   /**
    * Small or large icon.
    */
   export interface SingleIcon {
      /**
      * absolute url to icon.
      */
      url: string;

      /**
      * Icon width, in pixels.
      */
      width: number;

      /**
      * Icon height, in pixels.
      */
      height: number;

   }

   /**
    * Icon data. Contains sm+lg (for uploaded image) OR stub+letters+color (for icon generated from display name).
    */
   export interface IconData {
      /**
      * Small icon.
      */
      sm: SingleIcon | null;

      /**
      * Large image.
      */
      lg: SingleIcon | null;

      /**
      * Generated image with 1-2 letters.
      */
      stub: string;

      /**
      * Letters from stub icon.
      */
      letters: string;

      /**
      * Stub icon background color.
      */
      color: string;

   }

   /**
    * Chat message content.
    */
   export interface MessageContent {
      /**
      * Text repesentation of message.
      */
      text: string;

      /**
      * Message type.
      */
      type: Mediatype;

      /**
      * Message subtype, if any.
      */
      subtype: Mediasubtype;

      /**
      * Upload id, if any.
      */
      upload: string;

      /**
      * Upload url, if any.
      */
      mediaUrl: string;

      /**
      * Upload size, if any.
      */
      size: number;

      /**
      * Upload duration, if any.
      */
      duration: number | null;

      /**
      * Upload stil processing, if any.
      */
      processing: boolean;

      /**
      * Upload preview height, in pixels, if any.
      */
      previewHeight: number;

      /**
      * Upload width, in pixels, if any.
      */
      previewWidth: number;

      /**
      * Upload preview absolute url, if any.
      */
      previewUrl: string;

      /**
      * Upload high resolution preview absolute url, if any.
      */
      preview2xUrl: string;

      /**
      * Upload name, if any.
      */
      name: string;

      /**
      * Upload is animated image, if any.
      */
      animated: boolean;

      /**
      * Change title (for "change" mediatype).
      */
      title: string;

      /**
      * Change old value (for "change" mediatype).
      */
      old: string | null;

      /**
      * Change new value (for "change" mediatype).
      */
      new: string | null;

      /**
      * Change actor contact id (for "change" mediatype).
      */
      actor: JID | null;

      /**
      * Comment. For audimessage.
      */
      comment: string;

      /**
      * Given name (for "contact" mediatype).
      */
      givenName: string | null;

      /**
      * Family name (for "contact" mediatype).
      */
      familyName: string | null;

      /**
      * Patronymic name (for "contact" mediatype).
      */
      patronymic: string | null;

      /**
      * Contact phones list (for "contact" mediatype).
      */
      phones: string[] | null;

      /**
      * Emails list (for "contact" mediatype).
      */
      emails: string[] | null;

      /**
      * Stickerpack name (for "sticker" subtype).
      */
      stickerpack: string;

      /**
      * Pdf version, if any.
      */
      pdfVersion: PdfVersion | null;

   }

   /**
    * Chat message.
    */
   export interface Message {
      /**
      * Message content struct.
      */
      content: MessageContent;

      /**
      * Simple plaintext message representation.
      */
      pushText: string;

      /**
      * Sender contact id.
      */
      from: JID;

      /**
      * Recipient id (group, task or contact).
      */
      to: JID;

      /**
      * Message uid.
      */
      messageId: string;

      /**
      * Message creation datetime (set by server side).
      */
      created: string;

      /**
      * Object version.
      */
      gentime: number;

      /**
      * Chat type.
      */
      chatType: ChatType;

      /**
      * Chat id.
      */
      chat: JID;

      /**
      * External/internals links.
      */
      links: MessageLinks;

      /**
      * Importance flag.
      */
      important: boolean;

      /**
      * Datetime of message modification or deletion.
      */
      edited: string;

      /**
      * Message was seen by anybody in chat. True or null.
      */
      received: boolean;

      /**
      * Unused yet.
      */
      numReceived: number;

      /**
      * Disable link previews. True or null.
      */
      nopreview: boolean;

      /**
      * Has link previews. True or null.
      */
      hasPreviews: boolean;

      /**
      * Previous message id in this chat. Uid or null.
      */
      prev: string;

      /**
      * This message is first in this chat. True or null.
      */
      isFirst: boolean;

      /**
      * This message is first in this chat. True or null.
      */
      isLast: boolean;

      /**
      * Message reactions struct. Can be null.
      */
      reactions: MessageReaction[];

      /**
      * Message that was replied to, if any.
      */
      replyTo: Message | null;

      /**
      * Forwarded messages. Can be null. Also contains double of ReplyTo for backward compatibility.
      */
      linkedMessages: Message[];

      /**
      * Has mention (@). True or null.
      */
      notice: boolean;

      /**
      * Message has no pushes and did not affect any counters.
      */
      silently: boolean;

      /**
      * Author can change this message until date. Can be null.
      */
      editableUntil: string;

      /**
      * Index number of this message. Starts from 0. Null for deleted messages. Changes when any previous message wad deleted.
      */
      num: number | null;

      /**
      * Debug information, if any.
      */
      debug: string;

   }

   /**
    * Website title and description.
    */
   export interface MessageLinkPreview {
      /**
      * Website title or og:title content.
      */
      title: string;

      /**
      * Website description.
      */
      description: string;

   }

   /**
    * Checked message links. In short: "Click here: {link.Pattern}" => "Click here: <a href='{link.Url}'>{link.Text}</a>".
    */
   export interface MessageLink {
      /**
      * Text fragment that should be replaced by link.
      */
      pattern: string;

      /**
      * Internal (tadateam://) or external link.
      */
      url: string;

      /**
      * Text replacement.
      */
      text: string;

      /**
      * Optional preview info, for websites.
      */
      preview: MessageLinkPreview | null;

      /**
      * Optional upload info.
      */
      uploads: Upload[];

      /**
      * Website previews disabled.
      */
      noPreview: boolean;

      /**
      * Optional youtube movie id.
      */
      youtubeId: string;

   }

   /**
    * Message emoji reaction.
    */
   export interface MessageReaction {
      /**
      * Emoji.
      */
      name: string;

      /**
      * Number of reactions.
      */
      counter: number;

      /**
      * Details.
      */
      details: MessageReactionDetail[];

   }

   /**
    * Message reaction detail.
    */
   export interface MessageReactionDetail {
      /**
      * When reaction added, iso datetime.
      */
      created: string;

      /**
      * Reaction author.
      */
      sender: JID;

      /**
      * Reaction emoji.
      */
      name: string;

   }

   /**
    * Mimimal chat representaion.
    */
   export interface ChatShort {
      /**
      * Group/Task/Contact id.
      */
      jid: JID;

      /**
      * Chat type.
      */
      chatType: ChatType;

      /**
      * Title.
      */
      displayName: string;

      /**
      * Icon data.
      */
      icons: IconData | null;

   }

   /**
    * Mimimal chat representaion for deletion.
    */
   export interface DeletedChat {
      /**
      * Group/Task/Contact id.
      */
      jid: JID;

      /**
      * Chat type.
      */
      chatType: ChatType;

      /**
      * Chat fields (related to concrete participan) version.
      */
      gentime: number;

      /**
      * Archive flag. Always true for this structure.
      */
      isArchive: boolean;

   }

   /**
    * Chat (direct, group, task) representaion.
    */
   export interface Chat {
      /**
      * Group/Task/Contact id.
      */
      jid: JID;

      /**
      * Chat type.
      */
      chatType: ChatType;

      /**
      * Base fields (not related to concrete participant) version.
      */
      baseGentime: number;

      /**
      * Chat fields related to concrete participan) version.
      */
      gentime: number;

      /**
      * Creation date, iso datetime.
      */
      created: string;

      /**
      * Title.
      */
      displayName: string;

      /**
      * Icons info.
      */
      icons: IconData | null;

      /**
      * Include unread messages to counters.
      */
      countersEnabled: boolean;

      /**
      * Can I call to this chat.
      */
      canCall: boolean;

      /**
      * Can I send message to this chat.
      */
      canSendMessage: boolean;

      /**
      * Why I can't send message to this chat (if can't).
      */
      cantSendMessageReason: string;

      /**
      * Description collapsed. Used for tasks only.
      */
      collapsed: boolean;

      /**
      * Last message draft, if any.
      */
      draft: string;

      /**
      * Last message draft version , if any.
      */
      draftNum: number;

      /**
      * Hidden chat.
      */
      hidden: boolean;

      /**
      * Push notifications enabled.
      */
      notificationsEnabled: boolean;

      /**
      * Number of importants messages.
      */
      numImportants: number;

      /**
      * Unreads conuter.
      */
      numUnread: number;

      /**
      * Mentions (@) counter.
      */
      numUnreadNotices: number;

      /**
      * Last message object.
      */
      lastMessage: Message | null;

      /**
      * Last read message id, if any.
      */
      lastReadMessageId: string;

      /**
      * Project / section id, if any.
      */
      section: string;

      /**
      * List of editable fields.
      */
      changeableFields: string[];

      /**
      * Is chat pinned on top.
      */
      pinned: boolean;

      /**
      * Sort oreding for pinned chat.
      */
      pinnedSortOrdering: number;

      /**
      * Non-archive participants number.
      */
      numMembers: number | null;

      /**
      * Can I delete this chat.
      */
      canDelete: boolean;

      /**
      * Group or task description.
      */
      description: string;

      /**
      * Present in feed (main screen).
      */
      feed: boolean;

      /**
      * Pinned message for this chat.
      */
      pinnedMessage: Message | null;

      /**
      * Custom color index from table of colors. Tasks only.
      */
      colorIndex: number | null;

      /**
      * Items in checklist. Tasks only.
      */
      numItems: number | null;

      /**
      * Checked items in checklist. Tasks only.
      */
      numCheckedItems: number | null;

      /**
      * Assignee contact id. Tasks only.
      */
      assignee: JID | null;

      /**
      * Task number in this team.
      */
      num: number;

      /**
      * Task observers id's.
      */
      observers: JID[] | null;

      /**
      * Task creator.
      */
      owner: JID | null;

      /**
      * Task status. May be custom.
      */
      taskStatus: string;

      /**
      * Task title. Generated from number and description.
      */
      title: string;

      /**
      * Task done date in iso format, if any.
      */
      done: string;

      /**
      * Task done reason, if any.
      */
      doneReason: string;

      /**
      * Task deadline in iso format, if any.
      */
      deadline: string;

      /**
      * Is task deadline expired.
      */
      deadlineExpired: boolean;

      /**
      * Links in description.
      */
      links: MessageLinks;

      /**
      * Task tags list, if any.
      */
      tags: string[];

      /**
      * Task importance, if available in team.
      */
      importance: number | null;

      /**
      * Task urgency, if available in team.
      */
      urgency: number | null;

      /**
      * Task spent time, number.
      */
      spentTime: number | null;

      /**
      * Task complexity, number.
      */
      complexity: number | null;

      /**
      * Used for "Create task from messages...".
      */
      linkedMessages: any[];

      /**
      * Checklist items. Task only.
      */
      items: TaskItem[];

      /**
      * Parent tasks.
      */
      parents: Subtask[];

      /**
      * Tab names.
      */
      tabs: TaskTabKey[] | null;

      /**
      * My status in group chat.
      */
      status: GroupStatus | null;

      /**
      * Group chat members.
      */
      members: GroupMembership[];

      /**
      * Can I add member to this group chat.
      */
      canAddMember: boolean;

      /**
      * Can I remove member from this group chat.
      */
      canRemoveMember: boolean;

      /**
      * Can I change member status in this group chat.
      */
      canChangeMemberStatus: boolean;

      /**
      * deprecated: use changeable fields.
      */
      canChangeSettings: boolean;

      /**
      * Any new team member will be added to this group chat.
      */
      defaultForAll: boolean;

      /**
      * Readonly for non-admins group chat (Like Channels in Telegram bug switchable).
      */
      readonlyForMembers: boolean;

      /**
      * Delete messages in this chat in seconds. Experemental function.
      */
      autocleanupAge: number | null;

      /**
      * Can other team member see this task/group chat.
      */
      public: boolean;

      /**
      * Can I join to this public group/task.
      */
      canJoin: boolean;

      /**
      * Can I delete any message in this chat.
      */
      canDeleteAnyMessage: boolean | null;

      /**
      * Can I change Important flag in any message in this chat.
      */
      canSetImportantAnyMessage: boolean | null;

   }

   /**
    * Link to sub/sup task.
    */
   export interface Subtask {
      /**
      * Task id.
      */
      jid: JID;

      /**
      * Assignee contact id. Tasks only.
      */
      assignee: JID;

      /**
      * Task title. Generated from number and description.
      */
      title: string;

      /**
      * Task number in this team.
      */
      num: number;

      /**
      * Title.
      */
      displayName: string;

      /**
      * Can other team member see this task/group chat.
      */
      public: boolean;

   }

   /**
    * Task checklist item.
    */
   export interface TaskItem {
      /**
      * Id.
      */
      uid: string;

      /**
      * Sort ordering.
      */
      sortOrdering: number;

      /**
      * Text or "#{OtherTaskNumber}".
      */
      text: string;

      /**
      * Item checked.
      */
      checked: boolean;

      /**
      * Can I toggle this item.
      */
      canToggle: boolean;

      /**
      * Link to subtask. Optional.
      */
      subtask: Subtask | null;

   }

   /**
    * Group chat membership status.
    */
   export interface GroupMembership {
      /**
      * Contact id.
      */
      jid: JID;

      /**
      * Status in group.
      */
      status: GroupStatus;

      /**
      * Can I remove this member.
      */
      canRemove: boolean;

   }

   /**
    * Uploaded media.
    */
   export interface Upload {
      /**
      * Upload id.
      */
      uid: string;

      /**
      * Upload size in bytes.
      */
      size: number;

      /**
      * Mediafile duration (for audio/video only).
      */
      duration: number;

      /**
      * Filename.
      */
      name: string;

      /**
      * Absolute url.
      */
      url: string;

      /**
      * Preview details.
      */
      preview: UploadPreview | null;

      /**
      * Content type.
      */
      contentType: string;

      /**
      * Is animated (images only).
      */
      animated: boolean;

      /**
      * File still processing (video only).
      */
      processing: boolean;

      /**
      * PDF version of file. Experimental.
      */
      pdfVersion: PdfVersion | null;

   }

   /**
    * Upload preview.
    */
   export interface UploadPreview {
      /**
      * Absolute url to image.
      */
      url: string;

      /**
      * Absolute url to high resolution image (retina).
      */
      url2x: string;

      /**
      * Width in pixels.
      */
      width: number;

      /**
      * Height in pixels.
      */
      height: number;

   }

   /**
    * PDF preview of mediafile. Experimental.
    */
   export interface PdfVersion {
      /**
      * Absolute url.
      */
      url: string;

      /**
      * First string of text content.
      */
      textPreview: string;

   }

   /**
    * {hostname}/features.js / {hostname}/features.json structure.
    */
   export interface Features {
      /**
      * Current host.
      */
      host: string;

      /**
      * Build/revision of server side.
      */
      build: string;

      /**
      * Desktop application version.
      */
      desktopVersion: string;

      /**
      * Webclient version.
      */
      frontVersion: string;

      /**
      * Application title.
      */
      appTitle: string;

      /**
      * Static files server address.
      */
      userver: string;

      /**
      * Link to AppStore.
      */
      iOSApp: string;

      /**
      * Link to Google Play.
      */
      androidApp: string;

      /**
      * Default UI theme.
      */
      theme: string;

      /**
      * Minimal application version required for this server. Used for breaking changes.
      */
      minAppVersion: string;

      /**
      * Free registration allowed.
      */
      freeRegistration: boolean;

      /**
      * Maximum size of user's upload.
      */
      maxUploadMb: number;

      /**
      * Maximum number of forwarded messages.
      */
      maxLinkedMessages: number;

      /**
      * Maximum chars for: family_name, given_name, patronymic if any.
      */
      maxUsernamePartLength: number;

      /**
      * Maximum chars for group chat name.
      */
      maxGroupTitleLength: number;

      /**
      * Maximum chars for role in team.
      */
      maxRoleLength: number;

      /**
      * Maximum chars for mood in team.
      */
      maxMoodLength: number;

      /**
      * Maximum chars for text message.
      */
      maxMessageLength: number;

      /**
      * Maximum length for project and contact's sections names.
      */
      maxSectionLength: number;

      /**
      * Maximum length for tags.
      */
      maxTagLength: number;

      /**
      * Maximum length for task title.
      */
      maxTaskTitleLength: number;

      /**
      * Maximum teams for one account.
      */
      maxTeams: number;

      /**
      * Max inactivity seconds.
      */
      afkAge: number;

      /**
      * Password authentication enabled.
      */
      authByPassword: boolean;

      /**
      * QR-code / link authentication enabled.
      */
      authByQrCode: boolean;

      /**
      * SMS authentication enabled.
      */
      authBySms: boolean;

      /**
      * ICE servers for WebRTC.
      */
      iCEServers: ICEServer[];

      /**
      * True for onpremise installation.
      */
      customServer: boolean;

      /**
      * Name of instalation.
      */
      installationType: string;

      /**
      * Testing installation.
      */
      isTesting: boolean;

      /**
      * Yandex metrika counter id.
      */
      metrika: string;

      /**
      * Minimal chars number for starting global search.
      */
      minSearchLength: number;

      /**
      * Resend message in n seconds if no confirmation from server given.
      */
      resendTimeout: number;

      /**
      * Frontent sentry.io settings.
      */
      sentryDsnJS: string;

      /**
      * Message drafts saved on server.
      */
      serverDrafts: boolean;

      /**
      * Firebase application id for web-push notifacations.
      */
      firebaseAppId: string;

      /**
      * Firebase sender id for web-push notifacations.
      */
      firebaseSenderId: string;

      /**
      * Calls functions enabled.
      */
      calls: boolean;

      /**
      * Calls functions enabled for mobile applications.
      */
      mobileCalls: boolean;

      /**
      * Calls record enabled.
      */
      callsRecord: boolean;

      /**
      * Disallow call from multiply devices. Experimental.
      */
      onlyOneDevicePerCall: boolean;

      /**
      * Maximum number of participants per call.
      */
      maxParticipantsPerCall: number;

      /**
      * Safari push id for web-push notifacations.
      */
      safariPushId: string;

      /**
      * Team entity naming. Experimental.
      */
      terms: Terms;

      /**
      * Cross team communication. Experimental.
      */
      singleGroupTeams: boolean;

      /**
      * Wiki pages in chats. Experimental.
      */
      wikiPages: boolean;

      /**
      * Wiki pages in chats. Experimental.
      */
      allowAdminMute: boolean;

      /**
      * Deprecated.
      */
      taskChecklist: boolean;

      /**
      * Deprecated.
      */
      readonlyGroups: boolean;

      /**
      * Deprecated.
      */
      taskDashboard: boolean;

      /**
      * Deprecated.
      */
      taskMessages: boolean;

      /**
      * Deprecated.
      */
      taskPublic: boolean;

      /**
      * Deprecated.
      */
      taskTags: boolean;

   }

   /**
    * Interactive Connectivity Establishment Server for WEB Rtc connection.
    */
   export interface ICEServer {
      /**
      * URls.
      */
      urls: string;

   }

   /**
    * Exprtimental translation fields for "team" entity renaming.
    */
   export interface Terms {
      /**
      * EnInTeam.
      */
      enInTeam: string;

      /**
      * EnTeam.
      */
      enTeam: string;

      /**
      * EnTeamAccess.
      */
      enTeamAccess: string;

      /**
      * EnTeamAdmin.
      */
      enTeamAdmin: string;

      /**
      * EnTeamAdmins.
      */
      enTeamAdmins: string;

      /**
      * EnTeamGuest.
      */
      enTeamGuest: string;

      /**
      * EnTeamMember.
      */
      enTeamMember: string;

      /**
      * EnTeamMembers.
      */
      enTeamMembers: string;

      /**
      * EnTeamOwner.
      */
      enTeamOwner: string;

      /**
      * EnTeamSettings.
      */
      enTeamSettings: string;

      /**
      * RuTeamSettings.
      */
      ruTeamSettings: string;

      /**
      * EnTeams.
      */
      enTeams: string;

      /**
      * EnToTeam.
      */
      enToTeam: string;

      /**
      * RuInTeam.
      */
      ruInTeam: string;

      /**
      * RuTeam.
      */
      ruTeam: string;

      /**
      * RuTeamAccess.
      */
      ruTeamAccess: string;

      /**
      * RuTeamAdmin.
      */
      ruTeamAdmin: string;

      /**
      * RuTeamAdmins.
      */
      ruTeamAdmins: string;

      /**
      * RuTeamD.
      */
      ruTeamD: string;

      /**
      * RuTeamGuest.
      */
      ruTeamGuest: string;

      /**
      * RuTeamMember.
      */
      ruTeamMember: string;

      /**
      * RuTeamMembers.
      */
      ruTeamMembers: string;

      /**
      * RuTeamOwner.
      */
      ruTeamOwner: string;

      /**
      * RuTeamP.
      */
      ruTeamP: string;

      /**
      * RuTeamR.
      */
      ruTeamR: string;

      /**
      * RuTeams.
      */
      ruTeams: string;

      /**
      * RuTeamsD.
      */
      ruTeamsD: string;

      /**
      * RuTeamsP.
      */
      ruTeamsP: string;

      /**
      * RuTeamsR.
      */
      ruTeamsR: string;

      /**
      * RuTeamsT.
      */
      ruTeamsT: string;

      /**
      * RuTeamsV.
      */
      ruTeamsV: string;

      /**
      * RuTeamT.
      */
      ruTeamT: string;

      /**
      * RuTeamV.
      */
      ruTeamV: string;

      /**
      * RuToTeam.
      */
      ruToTeam: string;

   }

   /**
    * Audiocall information.
    */
   export interface CallEvent {
      /**
      * Call start, iso date.
      */
      start: string | null;

      /**
      * Call finish, iso date.
      */
      finish: string | null;

      /**
      * Call record enabled.
      */
      audiorecord: boolean;

      /**
      * Call members.
      */
      onliners: CallOnliner[];

   }

   /**
    * Call participant.
    */
   export interface CallOnliner {
      /**
      * Contact id.
      */
      jid: JID;

      /**
      * Contact name.
      */
      displayName: string;

      /**
      * Contact icon.
      */
      icon: string;

      /**
      * Microphone muted. Computed from devices muted states.
      */
      muted: boolean;

      /**
      * Member devices, strictly one for now.
      */
      devices: CallDevice[];

   }

   /**
    * Call participant device.
    */
   export interface CallDevice {
      /**
      * Device muted.
      */
      muted: boolean;

      /**
      * Device description.
      */
      useragent: string;

   }

   /**
    * Remind.
    */
   export interface Remind {
      /**
      * Remind id.
      */
      uid: string;

      /**
      * Chat id.
      */
      chat: JID;

      /**
      * Activation time, iso.
      */
      fireAt: string;

      /**
      * Comment, if any.
      */
      comment: string;

   }

   /**
    * Remind deleted message.
    */
   export interface DeletedRemind {
      /**
      * Remind id.
      */
      uid: string;

   }

   /**
    * Task tag.
    */
   export interface Tag {
      /**
      * Tag id.
      */
      uid: string;

      /**
      * Tag name.
      */
      name: string;

   }

   /**
    * Delete tag message.
    */
   export interface DeletedTag {
      /**
      * Tag id.
      */
      uid: string;

   }

   /**
    * Contact.
    */
   export interface Contact {
      /**
      * Contact Id.
      */
      jid: JID;

      /**
      * Full name in chats.
      */
      displayName: string;

      /**
      * Short name in chats.
      */
      shortName: string;

      /**
      * Contact email in this team.
      */
      contactEmail: string;

      /**
      * Contact phone in this team.
      */
      contactPhone: string;

      /**
      * Icons data.
      */
      icons: IconData | null;

      /**
      * Role in this team.
      */
      role: string;

      /**
      * Mood in this team.
      */
      mood: string;

      /**
      * Status in this team.
      */
      teamStatus: TeamStatus;

      /**
      * Last activity in this team (iso datetime).
      */
      lastActivity: string | null;

      /**
      * Can contact add users to this team.
      */
      addToTeamRights: boolean;

      /**
      * Contact deleted.
      */
      isArchive: boolean;

      /**
      * Bot name. Empty for users.
      */
      botname: string;

      /**
      * Section ids.
      */
      sections: string[];

      /**
      * Can I send message to this contact.
      */
      canSendMessage: boolean | null;

      /**
      * Why I can't send message to this chat (if can't).
      */
      cantSendMessageReason: string;

      /**
      * Can I call to this contact.
      */
      canCall: boolean | null;

      /**
      * Can I call create task for this contact.
      */
      canCreateTask: boolean | null;

      /**
      * Can I add this contact to group chats.
      */
      canAddToGroup: boolean | null;

      /**
      * Can I remove this contact from team.
      */
      canDelete: boolean | null;

      /**
      * Changeable fields.
      */
      changeableFields: string[] | null;

      /**
      * Family name.
      */
      familyName: string | null;

      /**
      * Given name.
      */
      givenName: string | null;

      /**
      * Patronymic, if any.
      */
      patronymic: string | null;

      /**
      * Default language code.
      */
      defaultLang: string | null;

      /**
      * Enable debug messages in UI.
      */
      debugShowActivity: boolean | null;

      /**
      * Enable remove all messages experimental features.
      */
      dropallEnabled: boolean | null;

      /**
      * Use Ctrl/Cmd + Enter insted Enter.
      */
      altSend: boolean | null;

      /**
      * Send push notifications even contact is online.
      */
      alwaysSendPushes: boolean | null;

      /**
      * Timezone, if any.
      */
      timezone: string | null;

      /**
      * Quiet time start.
      */
      quietTimeStart: string | null;

      /**
      * Quiet time finish.
      */
      quietTimeFinish: string | null;

      /**
      * Push notifications for group chats.
      */
      groupNotificationsEnabled: boolean | null;

      /**
      * Push notifications for task chats.
      */
      taskNotificationsEnabled: boolean | null;

      /**
      * Short view in contact list.
      */
      contactShortView: boolean | null;

      /**
      * Short view in group list.
      */
      groupShortView: boolean | null;

      /**
      * Short view in task list.
      */
      taskShortView: boolean | null;

      /**
      * Short view in contact list in mobile app.
      */
      contactMshortView: boolean | null;

      /**
      * Short view in group list in mobile app.
      */
      groupMshortView: boolean | null;

      /**
      * Short view in task list in mobile app.
      */
      taskMshortView: boolean | null;

      /**
      * Show archived contacts in contact list.
      */
      contactShowArchived: boolean | null;

      /**
      * Show inread chats first in feed.
      */
      unreadFirst: boolean | null;

      /**
      * Show inread chats first in feed in mobile app.
      */
      mUnreadFirst: boolean | null;

      /**
      * Can I add new members to this team.
      */
      canAddToTeam: boolean | null;

      /**
      * Can I manage sections in this team.
      */
      canManageSections: boolean | null;

      /**
      * Can I manage tags in this team.
      */
      canManageTags: boolean | null;

      /**
      * Can I manage integrations in this team.
      */
      canManageIntegrations: boolean | null;

      /**
      * Can I manage color rules in this team.
      */
      canManageColorRules: boolean | null;

      /**
      * Can I create group chats in this team.
      */
      canCreateGroup: boolean | null;

      /**
      * Can I view/join public group in this team.
      */
      canJoinPublicGroups: boolean | null;

      /**
      * Can I view/join public tasks in this team.
      */
      canJoinPublicTasks: boolean | null;

      /**
      * Deprecated: use CanDeleteAnyMessage in chat object.
      */
      canDeleteAnyMessage: boolean | null;

      /**
      * Extra contact fields.
      */
      customFields: ContactCustomFields | null;

   }

   /**
    * Extra contact fields.
    */
   export interface ContactCustomFields {
      /**
      * Company.
      */
      company: string;

      /**
      * Department.
      */
      department: string;

      /**
      * Title.
      */
      title: string;

      /**
      * MobilePhone.
      */
      mobilePhone: string;

   }

   /**
    * Short contact representaion.
    */
   export interface ContactShort {
      /**
      * Contact Id.
      */
      jid: JID;

      /**
      * Full name in chats.
      */
      displayName: string;

      /**
      * Short name in chats.
      */
      shortName: string;

      /**
      * Icons data.
      */
      icons: IconData | null;

   }

   /**
    * Custom task status.
    */
   export interface TaskStatus {
      /**
      * Status id.
      */
      uid: string;

      /**
      * Status sort ordering.
      */
      sortOrdering: number;

      /**
      * Status internal name.
      */
      name: string;

      /**
      * Status localized name.
      */
      title: string;

      /**
      * Status not used anymore.
      */
      isArchive: boolean;

   }

   /**
    * Color theme.
    */
   export interface Theme {
      /**
      * BgColor.
      */
      bgColor: string;

      /**
      * BgHoverColor.
      */
      bgHoverColor: string;

      /**
      * TextColor.
      */
      textColor: string;

      /**
      * MutedTextColor.
      */
      mutedTextColor: string;

      /**
      * AccentColor.
      */
      accentColor: string;

      /**
      * AccentHoverColor.
      */
      accentHoverColor: string;

      /**
      * TextOnAccentHoverColor.
      */
      textOnAccentHoverColor: string;

      /**
      * MainAccent.
      */
      mainAccent: string;

      /**
      * MainAccentHover.
      */
      mainAccentHover: string;

      /**
      * MainLightAccent.
      */
      mainLightAccent: string;

      /**
      * MainLink.
      */
      mainLink: string;

      /**
      * AppAccentColor.
      */
      appAccentColor: string;

      /**
      * AppPrimaryColor.
      */
      appPrimaryColor: string;

   }

}

const undef = (v: any): boolean => (typeof v === 'undefined')
/**
 * Create NewTeam from raw json.
 */
export const NewTeam = (e: any): TdProto.Team => ({
    uid: e['uid'],
    isArchive: undef(e['is_archive']) ? false : e['is_archive'],
    gentime: e['gentime'],
    name: e['name'],
    defaultTaskDeadline: undef(e['default_task_deadline']) ? '' : e['default_task_deadline'],
    maxMessageUpdateAge: e['max_message_update_age'],
    icons: e['icons'].map(NewIconData),
    lastActive: e['last_active'],
    changeableStatuses: undef(e['changeable_statuses']) ? [] : e['changeable_statuses'],
    badProfile: undef(e['bad_profile']) ? false : e['bad_profile'],
    needConfirmation: e['need_confirmation'],
    usePatronymic: undef(e['use_patronymic']) ? false : e['use_patronymic'],
    userFields: e['user_fields'],
    displayFamilyNameFirst: undef(e['display_family_name_first']) ? false : e['display_family_name_first'],
    useTaskImportance: undef(e['use_task_importance']) ? false : e['use_task_importance'],
    taskImportanceMin: undef(e['task_importance_min']) ? 0 : e['task_importance_min'],
    taskImportanceMax: undef(e['task_importance_max']) ? 0 : e['task_importance_max'],
    taskImportanceRev: undef(e['task_importance_rev']) ? false : e['task_importance_rev'],
    useTaskUrgency: undef(e['use_task_urgency']) ? false : e['use_task_urgency'],
    useTaskComplexity: undef(e['use_task_complexity']) ? false : e['use_task_complexity'],
    useTaskSpentTime: undef(e['use_task_spent_time']) ? false : e['use_task_spent_time'],
    uploadsSize: undef(e['uploads_size']) ? 0 : e['uploads_size'],
    uploadsSizeLimit: undef(e['uploads_size_limit']) ? 0 : e['uploads_size_limit'],
    unreads: e['unread'],
    me: e['me'].map(NewContact),
    contacts: undef(e['contacts']) ? [] : e['contacts'].map(NewContact),
    singleGroup: undef(e['single_group']) ? null : e['single_group'],
    theme: undef(e['theme']) ? null : e['theme'].map(NewTheme),
    hideArchivedUsers: undef(e['hide_archived_users']) ? false : e['hide_archived_users'],
})

/**
 * Create NewTeamShort from raw json.
 */
export const NewTeamShort = (e: any): TdProto.TeamShort => ({
    uid: e['uid'],
    name: e['name'],
    icons: e['icons'].map(NewIconData),
})

/**
 * Create NewDeletedTeam from raw json.
 */
export const NewDeletedTeam = (e: any): TdProto.DeletedTeam => ({
    uid: e['uid'],
    isArchive: e['is_archive'],
    gentime: e['gentime'],
})

/**
 * Create NewTaskColor from raw json.
 */
export const NewTaskColor = (e: any): TdProto.TaskColor => ({
    regular: e['regular'],
    dark: e['dark'],
    light: e['light'],
})

/**
 * Create NewWikiPage from raw json.
 */
export const NewWikiPage = (e: any): TdProto.WikiPage => ({
    gentime: e['gentime'],
    updated: e['updated'],
    editor: e['editor'],
    text: e['text'],
})

/**
 * Create NewUnread from raw json.
 */
export const NewUnread = (e: any): TdProto.Unread => ({
    numMessages: e['messages'],
    numNoticeMessages: e['notice_messages'],
    numChats: e['chats'],
})

/**
 * Create NewTeamCounter from raw json.
 */
export const NewTeamCounter = (e: any): TdProto.TeamCounter => ({
    uid: e['uid'],
    unreads: e['unread'],
})

/**
 * Create NewSingleIcon from raw json.
 */
export const NewSingleIcon = (e: any): TdProto.SingleIcon => ({
    url: e['url'],
    width: e['width'],
    height: e['height'],
})

/**
 * Create NewIconData from raw json.
 */
export const NewIconData = (e: any): TdProto.IconData => ({
    sm: undef(e['sm']) ? null : e['sm'].map(NewSingleIcon),
    lg: undef(e['lg']) ? null : e['lg'].map(NewSingleIcon),
    stub: undef(e['stub']) ? '' : e['stub'],
    letters: undef(e['letters']) ? '' : e['letters'],
    color: undef(e['color']) ? '' : e['color'],
})

/**
 * Create NewMessageContent from raw json.
 */
export const NewMessageContent = (e: any): TdProto.MessageContent => ({
    text: e['text'],
    type: e['type'],
    subtype: undef(e['subtype']) ? '' : e['subtype'],
    upload: undef(e['upload']) ? '' : e['upload'],
    mediaUrl: undef(e['mediaURL']) ? '' : e['mediaURL'],
    size: undef(e['size']) ? 0 : e['size'],
    duration: undef(e['duration']) ? null : e['duration'],
    processing: undef(e['processing']) ? false : e['processing'],
    previewHeight: undef(e['previewHeight']) ? 0 : e['previewHeight'],
    previewWidth: undef(e['previewWidth']) ? 0 : e['previewWidth'],
    previewUrl: undef(e['previewURL']) ? '' : e['previewURL'],
    preview2xUrl: undef(e['preview2xURL']) ? '' : e['preview2xURL'],
    name: undef(e['name']) ? '' : e['name'],
    animated: undef(e['animated']) ? false : e['animated'],
    title: undef(e['title']) ? '' : e['title'],
    old: undef(e['old']) ? null : e['old'],
    new: undef(e['new']) ? null : e['new'],
    actor: undef(e['actor']) ? null : e['actor'],
    comment: undef(e['comment']) ? '' : e['comment'],
    givenName: undef(e['given_name']) ? null : e['given_name'],
    familyName: undef(e['family_name']) ? null : e['family_name'],
    patronymic: undef(e['patronymic']) ? null : e['patronymic'],
    phones: undef(e['phones']) ? [] : e['phones'],
    emails: undef(e['emails']) ? [] : e['emails'],
    stickerpack: undef(e['stickerpack']) ? '' : e['stickerpack'],
    pdfVersion: undef(e['pdf_version']) ? null : e['pdf_version'].map(NewPdfVersion),
})

/**
 * Create NewMessage from raw json.
 */
export const NewMessage = (e: any): TdProto.Message => ({
    content: e['content'].map(NewMessageContent),
    pushText: undef(e['push_text']) ? '' : e['push_text'],
    from: e['from'],
    to: e['to'],
    messageId: e['message_id'],
    created: e['created'],
    gentime: e['gentime'],
    chatType: e['chat_type'],
    chat: e['chat'],
    links: undef(e['links']) ? [] : e['links'],
    important: undef(e['important']) ? false : e['important'],
    edited: undef(e['edited']) ? '' : e['edited'],
    received: undef(e['received']) ? false : e['received'],
    numReceived: undef(e['num_received']) ? 0 : e['num_received'],
    nopreview: undef(e['nopreview']) ? false : e['nopreview'],
    hasPreviews: undef(e['has_previews']) ? false : e['has_previews'],
    prev: undef(e['prev']) ? '' : e['prev'],
    isFirst: undef(e['is_first']) ? false : e['is_first'],
    isLast: undef(e['is_last']) ? false : e['is_last'],
    reactions: undef(e['reactions']) ? [] : e['reactions'].map(NewMessageReaction),
    replyTo: undef(e['reply_to']) ? null : e['reply_to'].map(NewMessage),
    linkedMessages: undef(e['linked_messages']) ? [] : e['linked_messages'].map(NewMessage),
    notice: undef(e['notice']) ? false : e['notice'],
    silently: undef(e['silently']) ? false : e['silently'],
    editableUntil: undef(e['editable_until']) ? '' : e['editable_until'],
    num: undef(e['num']) ? null : e['num'],
    debug: undef(e['_debug']) ? '' : e['_debug'],
})

/**
 * Create NewMessageLinkPreview from raw json.
 */
export const NewMessageLinkPreview = (e: any): TdProto.MessageLinkPreview => ({
    title: e['title'],
    description: undef(e['description']) ? '' : e['description'],
})

/**
 * Create NewMessageLink from raw json.
 */
export const NewMessageLink = (e: any): TdProto.MessageLink => ({
    pattern: e['pattern'],
    url: e['url'],
    text: e['text'],
    preview: undef(e['preview']) ? null : e['preview'].map(NewMessageLinkPreview),
    uploads: undef(e['uploads']) ? [] : e['uploads'].map(NewUpload),
    noPreview: undef(e['nopreview']) ? false : e['nopreview'],
    youtubeId: undef(e['youtube_id']) ? '' : e['youtube_id'],
})

/**
 * Create NewMessageReaction from raw json.
 */
export const NewMessageReaction = (e: any): TdProto.MessageReaction => ({
    name: e['name'],
    counter: e['counter'],
    details: e['details'].map(NewMessageReactionDetail),
})

/**
 * Create NewMessageReactionDetail from raw json.
 */
export const NewMessageReactionDetail = (e: any): TdProto.MessageReactionDetail => ({
    created: e['created'],
    sender: e['sender'],
    name: e['name'],
})

/**
 * Create NewChatShort from raw json.
 */
export const NewChatShort = (e: any): TdProto.ChatShort => ({
    jid: e['jid'],
    chatType: e['chat_type'],
    displayName: e['display_name'],
    icons: e['icons'].map(NewIconData),
})

/**
 * Create NewDeletedChat from raw json.
 */
export const NewDeletedChat = (e: any): TdProto.DeletedChat => ({
    jid: e['jid'],
    chatType: e['chat_type'],
    gentime: e['gentime'],
    isArchive: e['is_archive'],
})

/**
 * Create NewChat from raw json.
 */
export const NewChat = (e: any): TdProto.Chat => ({
    jid: e['jid'],
    chatType: e['chat_type'],
    baseGentime: undef(e['base_gentime']) ? 0 : e['base_gentime'],
    gentime: e['gentime'],
    created: e['created'],
    displayName: e['display_name'],
    icons: e['icons'].map(NewIconData),
    countersEnabled: undef(e['counters_enabled']) ? false : e['counters_enabled'],
    canCall: undef(e['can_call']) ? false : e['can_call'],
    canSendMessage: undef(e['can_send_message']) ? false : e['can_send_message'],
    cantSendMessageReason: undef(e['cant_send_message_reason']) ? '' : e['cant_send_message_reason'],
    collapsed: undef(e['collapsed']) ? false : e['collapsed'],
    draft: undef(e['draft']) ? '' : e['draft'],
    draftNum: undef(e['draft_num']) ? 0 : e['draft_num'],
    hidden: undef(e['hidden']) ? false : e['hidden'],
    notificationsEnabled: undef(e['notifications_enabled']) ? false : e['notifications_enabled'],
    numImportants: undef(e['num_importants']) ? 0 : e['num_importants'],
    numUnread: undef(e['num_unread']) ? 0 : e['num_unread'],
    numUnreadNotices: undef(e['num_unread_notices']) ? 0 : e['num_unread_notices'],
    lastMessage: undef(e['last_message']) ? null : e['last_message'].map(NewMessage),
    lastReadMessageId: undef(e['last_read_message_id']) ? '' : e['last_read_message_id'],
    section: undef(e['section']) ? '' : e['section'],
    changeableFields: undef(e['changeable_fields']) ? [] : e['changeable_fields'],
    pinned: undef(e['pinned']) ? false : e['pinned'],
    pinnedSortOrdering: undef(e['pinned_sort_ordering']) ? 0 : e['pinned_sort_ordering'],
    numMembers: undef(e['num_members']) ? null : e['num_members'],
    canDelete: undef(e['can_delete']) ? false : e['can_delete'],
    description: undef(e['description']) ? '' : e['description'],
    feed: undef(e['feed']) ? false : e['feed'],
    pinnedMessage: undef(e['pinned_message']) ? null : e['pinned_message'].map(NewMessage),
    colorIndex: undef(e['color_index']) ? null : e['color_index'],
    numItems: undef(e['num_items']) ? null : e['num_items'],
    numCheckedItems: undef(e['num_checked_items']) ? null : e['num_checked_items'],
    assignee: undef(e['assignee']) ? null : e['assignee'],
    num: undef(e['num']) ? 0 : e['num'],
    observers: undef(e['observers']) ? [] : e['observers'],
    owner: undef(e['owner']) ? null : e['owner'],
    taskStatus: undef(e['task_status']) ? '' : e['task_status'],
    title: undef(e['title']) ? '' : e['title'],
    done: undef(e['done']) ? '' : e['done'],
    doneReason: undef(e['done_reason']) ? '' : e['done_reason'],
    deadline: undef(e['deadline']) ? '' : e['deadline'],
    deadlineExpired: undef(e['deadline_expired']) ? false : e['deadline_expired'],
    links: undef(e['links']) ? [] : e['links'],
    tags: undef(e['tags']) ? [] : e['tags'],
    importance: undef(e['importance']) ? null : e['importance'],
    urgency: undef(e['urgency']) ? null : e['urgency'],
    spentTime: undef(e['spent_time']) ? null : e['spent_time'],
    complexity: undef(e['complexity']) ? null : e['complexity'],
    linkedMessages: undef(e['linked_messages']) ? [] : e['linked_messages'],
    items: undef(e['items']) ? [] : e['items'].map(NewTaskItem),
    parents: undef(e['parents']) ? [] : e['parents'].map(NewSubtask),
    tabs: undef(e['tabs']) ? [] : e['tabs'],
    status: undef(e['status']) ? null : e['status'],
    members: undef(e['members']) ? [] : e['members'].map(NewGroupMembership),
    canAddMember: undef(e['can_add_member']) ? false : e['can_add_member'],
    canRemoveMember: undef(e['can_remove_member']) ? false : e['can_remove_member'],
    canChangeMemberStatus: undef(e['can_change_member_status']) ? false : e['can_change_member_status'],
    canChangeSettings: undef(e['can_change_settings']) ? false : e['can_change_settings'],
    defaultForAll: undef(e['default_for_all']) ? false : e['default_for_all'],
    readonlyForMembers: undef(e['readonly_for_members']) ? false : e['readonly_for_members'],
    autocleanupAge: undef(e['autocleanup_age']) ? null : e['autocleanup_age'],
    public: undef(e['public']) ? false : e['public'],
    canJoin: undef(e['can_join']) ? false : e['can_join'],
    canDeleteAnyMessage: undef(e['can_delete_any_message']) ? null : e['can_delete_any_message'],
    canSetImportantAnyMessage: undef(e['can_set_important_any_message']) ? null : e['can_set_important_any_message'],
})

/**
 * Create NewSubtask from raw json.
 */
export const NewSubtask = (e: any): TdProto.Subtask => ({
    jid: e['jid'],
    assignee: e['assignee'],
    title: e['title'],
    num: e['num'],
    displayName: e['display_name'],
    public: undef(e['public']) ? false : e['public'],
})

/**
 * Create NewTaskItem from raw json.
 */
export const NewTaskItem = (e: any): TdProto.TaskItem => ({
    uid: undef(e['uid']) ? '' : e['uid'],
    sortOrdering: undef(e['sort_ordering']) ? 0 : e['sort_ordering'],
    text: e['text'],
    checked: undef(e['checked']) ? false : e['checked'],
    canToggle: undef(e['can_toggle']) ? false : e['can_toggle'],
    subtask: undef(e['subtask']) ? null : e['subtask'].map(NewSubtask),
})

/**
 * Create NewGroupMembership from raw json.
 */
export const NewGroupMembership = (e: any): TdProto.GroupMembership => ({
    jid: e['jid'],
    status: e['status'],
    canRemove: undef(e['can_remove']) ? false : e['can_remove'],
})

/**
 * Create NewUpload from raw json.
 */
export const NewUpload = (e: any): TdProto.Upload => ({
    uid: e['uid'],
    size: e['size'],
    duration: undef(e['duration']) ? 0 : e['duration'],
    name: e['name'],
    url: e['url'],
    preview: undef(e['preview']) ? null : e['preview'].map(NewUploadPreview),
    contentType: e['content_type'],
    animated: undef(e['animated']) ? false : e['animated'],
    processing: undef(e['processing']) ? false : e['processing'],
    pdfVersion: undef(e['pdf_version']) ? null : e['pdf_version'].map(NewPdfVersion),
})

/**
 * Create NewUploadPreview from raw json.
 */
export const NewUploadPreview = (e: any): TdProto.UploadPreview => ({
    url: e['url'],
    url2x: e['url_2x'],
    width: e['width'],
    height: e['height'],
})

/**
 * Create NewPdfVersion from raw json.
 */
export const NewPdfVersion = (e: any): TdProto.PdfVersion => ({
    url: e['url'],
    textPreview: undef(e['text_preview']) ? '' : e['text_preview'],
})

/**
 * Create NewFeatures from raw json.
 */
export const NewFeatures = (e: any): TdProto.Features => ({
    host: e['host'],
    build: e['build'],
    desktopVersion: e['desktop_version'],
    frontVersion: e['front_version'],
    appTitle: e['app_title'],
    userver: e['userver'],
    iOSApp: e['ios_app'],
    androidApp: e['android_app'],
    theme: e['theme'],
    minAppVersion: e['min_app_version'],
    freeRegistration: e['free_registration'],
    maxUploadMb: e['max_upload_mb'],
    maxLinkedMessages: e['max_linked_messages'],
    maxUsernamePartLength: e['max_username_part_length'],
    maxGroupTitleLength: e['max_group_title_length'],
    maxRoleLength: e['max_role_length'],
    maxMoodLength: e['max_mood_length'],
    maxMessageLength: e['max_message_length'],
    maxSectionLength: e['max_section_length'],
    maxTagLength: e['max_tag_length'],
    maxTaskTitleLength: e['max_task_title_length'],
    maxTeams: e['max_teams'],
    afkAge: e['afk_age'],
    authByPassword: undef(e['auth_by_password']) ? false : e['auth_by_password'],
    authByQrCode: undef(e['auth_by_qr_code']) ? false : e['auth_by_qr_code'],
    authBySms: undef(e['auth_by_sms']) ? false : e['auth_by_sms'],
    iCEServers: e['ice_servers'].map(NewICEServer),
    customServer: e['custom_server'],
    installationType: e['installation_type'],
    isTesting: e['is_testing'],
    metrika: e['metrika'],
    minSearchLength: e['min_search_length'],
    resendTimeout: e['resend_timeout'],
    sentryDsnJS: e['sentry_dsn_js'],
    serverDrafts: e['server_drafts'],
    firebaseAppId: e['firebase_app_id'],
    firebaseSenderId: e['firebase_sender_id'],
    calls: e['calls'],
    mobileCalls: e['mobile_calls'],
    callsRecord: e['calls_record'],
    onlyOneDevicePerCall: undef(e['only_one_device_per_call']) ? false : e['only_one_device_per_call'],
    maxParticipantsPerCall: undef(e['max_participants_per_call']) ? 0 : e['max_participants_per_call'],
    safariPushId: e['safari_push_id'],
    terms: e['terms'].map(NewTerms),
    singleGroupTeams: e['single_group_teams'],
    wikiPages: e['wiki_pages'],
    allowAdminMute: undef(e['allow_admin_mute']) ? false : e['allow_admin_mute'],
    taskChecklist: e['task_checklist'],
    readonlyGroups: e['readonly_groups'],
    taskDashboard: e['task_dashboard'],
    taskMessages: e['task_messages'],
    taskPublic: e['task_public'],
    taskTags: e['task_tags'],
})

/**
 * Create NewICEServer from raw json.
 */
export const NewICEServer = (e: any): TdProto.ICEServer => ({
    urls: e['urls'],
})

/**
 * Create NewTerms from raw json.
 */
export const NewTerms = (e: any): TdProto.Terms => ({
    enInTeam: e['EnInTeam'],
    enTeam: e['EnTeam'],
    enTeamAccess: e['EnTeamAccess'],
    enTeamAdmin: e['EnTeamAdmin'],
    enTeamAdmins: e['EnTeamAdmins'],
    enTeamGuest: e['EnTeamGuest'],
    enTeamMember: e['EnTeamMember'],
    enTeamMembers: e['EnTeamMembers'],
    enTeamOwner: e['EnTeamOwner'],
    enTeamSettings: e['EnTeamSettings'],
    ruTeamSettings: e['RuTeamSettings'],
    enTeams: e['EnTeams'],
    enToTeam: e['EnToTeam'],
    ruInTeam: e['RuInTeam'],
    ruTeam: e['RuTeam'],
    ruTeamAccess: e['RuTeamAccess'],
    ruTeamAdmin: e['RuTeamAdmin'],
    ruTeamAdmins: e['RuTeamAdmins'],
    ruTeamD: e['RuTeamD'],
    ruTeamGuest: e['RuTeamGuest'],
    ruTeamMember: e['RuTeamMember'],
    ruTeamMembers: e['RuTeamMembers'],
    ruTeamOwner: e['RuTeamOwner'],
    ruTeamP: e['RuTeamP'],
    ruTeamR: e['RuTeamR'],
    ruTeams: e['RuTeams'],
    ruTeamsD: e['RuTeamsD'],
    ruTeamsP: e['RuTeamsP'],
    ruTeamsR: e['RuTeamsR'],
    ruTeamsT: e['RuTeamsT'],
    ruTeamsV: e['RuTeamsV'],
    ruTeamT: e['RuTeamT'],
    ruTeamV: e['RuTeamV'],
    ruToTeam: e['RuToTeam'],
})

/**
 * Create NewCallEvent from raw json.
 */
export const NewCallEvent = (e: any): TdProto.CallEvent => ({
    start: e['start'],
    finish: e['finish'],
    audiorecord: e['audiorecord'],
    onliners: e['onliners'].map(NewCallOnliner),
})

/**
 * Create NewCallOnliner from raw json.
 */
export const NewCallOnliner = (e: any): TdProto.CallOnliner => ({
    jid: e['jid'],
    displayName: e['display_name'],
    icon: e['icon'],
    muted: e['muted'],
    devices: e['devices'].map(NewCallDevice),
})

/**
 * Create NewCallDevice from raw json.
 */
export const NewCallDevice = (e: any): TdProto.CallDevice => ({
    muted: e['muted'],
    useragent: e['useragent'],
})

/**
 * Create NewRemind from raw json.
 */
export const NewRemind = (e: any): TdProto.Remind => ({
    uid: e['uid'],
    chat: e['chat'],
    fireAt: e['fire_at'],
    comment: undef(e['comment']) ? '' : e['comment'],
})

/**
 * Create NewDeletedRemind from raw json.
 */
export const NewDeletedRemind = (e: any): TdProto.DeletedRemind => ({
    uid: e['uid'],
})

/**
 * Create NewTag from raw json.
 */
export const NewTag = (e: any): TdProto.Tag => ({
    uid: e['uid'],
    name: e['name'],
})

/**
 * Create NewDeletedTag from raw json.
 */
export const NewDeletedTag = (e: any): TdProto.DeletedTag => ({
    uid: e['uid'],
})

/**
 * Create NewContact from raw json.
 */
export const NewContact = (e: any): TdProto.Contact => ({
    jid: e['jid'],
    displayName: e['display_name'],
    shortName: e['short_name'],
    contactEmail: e['contact_email'],
    contactPhone: e['contact_phone'],
    icons: e['icons'].map(NewIconData),
    role: e['role'],
    mood: undef(e['mood']) ? '' : e['mood'],
    teamStatus: e['status'],
    lastActivity: e['last_activity'],
    addToTeamRights: undef(e['add_to_team_rights']) ? false : e['add_to_team_rights'],
    isArchive: undef(e['is_archive']) ? false : e['is_archive'],
    botname: undef(e['botname']) ? '' : e['botname'],
    sections: e['sections'],
    canSendMessage: undef(e['can_send_message']) ? null : e['can_send_message'],
    cantSendMessageReason: undef(e['cant_send_message_reason']) ? '' : e['cant_send_message_reason'],
    canCall: undef(e['can_call']) ? null : e['can_call'],
    canCreateTask: undef(e['can_create_task']) ? null : e['can_create_task'],
    canAddToGroup: undef(e['can_add_to_group']) ? null : e['can_add_to_group'],
    canDelete: undef(e['can_delete']) ? null : e['can_delete'],
    changeableFields: undef(e['changeable_fields']) ? [] : e['changeable_fields'],
    familyName: undef(e['family_name']) ? null : e['family_name'],
    givenName: undef(e['given_name']) ? null : e['given_name'],
    patronymic: undef(e['patronymic']) ? null : e['patronymic'],
    defaultLang: undef(e['default_lang']) ? null : e['default_lang'],
    debugShowActivity: undef(e['debug_show_activity']) ? null : e['debug_show_activity'],
    dropallEnabled: undef(e['dropall_enabled']) ? null : e['dropall_enabled'],
    altSend: undef(e['alt_send']) ? null : e['alt_send'],
    alwaysSendPushes: undef(e['always_send_pushes']) ? null : e['always_send_pushes'],
    timezone: undef(e['timezone']) ? null : e['timezone'],
    quietTimeStart: undef(e['quiet_time_start']) ? null : e['quiet_time_start'],
    quietTimeFinish: undef(e['quiet_time_finish']) ? null : e['quiet_time_finish'],
    groupNotificationsEnabled: undef(e['group_notifications_enabled']) ? null : e['group_notifications_enabled'],
    taskNotificationsEnabled: undef(e['task_notifications_enabled']) ? null : e['task_notifications_enabled'],
    contactShortView: undef(e['contact_short_view']) ? null : e['contact_short_view'],
    groupShortView: undef(e['group_short_view']) ? null : e['group_short_view'],
    taskShortView: undef(e['task_short_view']) ? null : e['task_short_view'],
    contactMshortView: undef(e['contact_mshort_view']) ? null : e['contact_mshort_view'],
    groupMshortView: undef(e['group_mshort_view']) ? null : e['group_mshort_view'],
    taskMshortView: undef(e['task_mshort_view']) ? null : e['task_mshort_view'],
    contactShowArchived: undef(e['contact_show_archived']) ? null : e['contact_show_archived'],
    unreadFirst: undef(e['unread_first']) ? null : e['unread_first'],
    mUnreadFirst: undef(e['munread_first']) ? null : e['munread_first'],
    canAddToTeam: undef(e['can_add_to_team']) ? null : e['can_add_to_team'],
    canManageSections: undef(e['can_manage_sections']) ? null : e['can_manage_sections'],
    canManageTags: undef(e['can_manage_tags']) ? null : e['can_manage_tags'],
    canManageIntegrations: undef(e['can_manage_integrations']) ? null : e['can_manage_integrations'],
    canManageColorRules: undef(e['can_manage_color_rules']) ? null : e['can_manage_color_rules'],
    canCreateGroup: undef(e['can_create_group']) ? null : e['can_create_group'],
    canJoinPublicGroups: undef(e['can_join_public_groups']) ? null : e['can_join_public_groups'],
    canJoinPublicTasks: undef(e['can_join_public_tasks']) ? null : e['can_join_public_tasks'],
    canDeleteAnyMessage: undef(e['can_delete_any_message']) ? null : e['can_delete_any_message'],
    customFields: undef(e['custom_fields']) ? null : e['custom_fields'].map(NewContactCustomFields),
})

/**
 * Create NewContactCustomFields from raw json.
 */
export const NewContactCustomFields = (e: any): TdProto.ContactCustomFields => ({
    company: undef(e['company']) ? '' : e['company'],
    department: undef(e['department']) ? '' : e['department'],
    title: undef(e['title']) ? '' : e['title'],
    mobilePhone: undef(e['mobile_phone']) ? '' : e['mobile_phone'],
})

/**
 * Create NewContactShort from raw json.
 */
export const NewContactShort = (e: any): TdProto.ContactShort => ({
    jid: e['jid'],
    displayName: e['display_name'],
    shortName: e['short_name'],
    icons: e['icons'].map(NewIconData),
})

/**
 * Create NewTaskStatus from raw json.
 */
export const NewTaskStatus = (e: any): TdProto.TaskStatus => ({
    uid: undef(e['uid']) ? '' : e['uid'],
    sortOrdering: e['sort_ordering'],
    name: e['name'],
    title: e['title'],
    isArchive: undef(e['is_archive']) ? false : e['is_archive'],
})

/**
 * Create NewTheme from raw json.
 */
export const NewTheme = (e: any): TdProto.Theme => ({
    bgColor: e['BgColor'],
    bgHoverColor: e['BgHoverColor'],
    textColor: e['TextColor'],
    mutedTextColor: e['MutedTextColor'],
    accentColor: e['AccentColor'],
    accentHoverColor: e['AccentHoverColor'],
    textOnAccentHoverColor: e['TextOnAccentHoverColor'],
    mainAccent: e['MainAccent'],
    mainAccentHover: e['MainAccentHover'],
    mainLightAccent: e['MainLightAccent'],
    mainLink: e['MainLink'],
    appAccentColor: e['AppAccentColor'],
    appPrimaryColor: e['AppPrimaryColor'],
})


