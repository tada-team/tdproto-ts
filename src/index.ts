// Autogenerated. Do not edit.

/**
 * Website title and description.
 */
export interface MessageLinkPreview {
   /**
    * Website title or og:title content.
    */
   title: string;

   /**
    * Website description. Omitempty.
    */
   description: string;

}

/**
 * Checked message links. In short: "Click here: {link.Pattern}" => "Click here: <a href='{link.Url}'>{link.Text}</a>".
 */
export interface MessageLink {
   /**
    * Text fragment that should be replaced by link.
    */
   pattern: string;

   /**
    * Internal (tadateam://) or external link.
    */
   url: string;

   /**
    * Text replacement.
    */
   text: string;

   /**
    * Optional preview info, for websites. Omitempty.
    */
   preview: MessageLinkPreview | null;

   /**
    * Optional upload info. Omitempty.
    */
   uploads: Upload[];

   /**
    * Website previews disabled. Omitempty.
    */
   noPreview: boolean;

   /**
    * Optional youtube movie id. Omitempty.
    */
   youtubeId: string;

}

/**
 * Audiocall information.
 */
export interface CallEvent {
   /**
    * Call start, iso date.
    */
   start: string | null;

   /**
    * Call finish, iso date.
    */
   finish: string | null;

   /**
    * Call record enabled.
    */
   audiorecord: boolean;

   /**
    * Call members.
    */
   onliners: CallOnliner[];

}

/**
 * Call participant.
 */
export interface CallOnliner {
   /**
    * Contact id.
    */
   jid: JID;

   /**
    * Contact name.
    */
   displayName: string;

   /**
    * Contact icon.
    */
   icon: string;

   /**
    * Microphone muted. Computed from devices muted states.
    */
   muted: boolean;

   /**
    * Member devices, strictly one for now.
    */
   devices: CallDevice[];

}

/**
 * Call participant device.
 */
export interface CallDevice {
   /**
    * Device muted.
    */
   muted: boolean;

   /**
    * Device description.
    */
   useragent: string;

}

/**
 * Small or large icon.
 */
export interface SingleIcon {
   /**
    * absolute url to icon.
    */
   url: string;

   /**
    * Icon width, in pixels.
    */
   width: number;

   /**
    * Icon height, in pixels.
    */
   height: number;

}

/**
 * Icon data. Contains sm+lg (for uploaded image) OR stub+letters+color (for icon generated from display name).
 */
export interface IconData {
   /**
    * Small icon. Omitempty.
    */
   sm: SingleIcon | null;

   /**
    * Large image. Omitempty.
    */
   lg: SingleIcon | null;

   /**
    * Generated image with 1-2 letters. Omitempty.
    */
   stub: string;

   /**
    * Letters from stub icon. Omitempty.
    */
   letters: string;

   /**
    * Stub icon background color. Omitempty.
    */
   color: string;

}

/**
 * Mimimal chat representaion.
 */
export interface ChatShort {
   /**
    * Group/Task/Contact id.
    */
   jid: JID;

   /**
    * Chat type.
    */
   chatType: ChatType;

   /**
    * Title.
    */
   displayName: string;

   /**
    * Icon data.
    */
   icons: IconData | null;

}

/**
 * Mimimal chat representaion for deletion.
 */
export interface DeletedChat {
   /**
    * Group/Task/Contact id.
    */
   jid: JID;

   /**
    * Chat type.
    */
   chatType: ChatType;

   /**
    * Chat fields (related to concrete participan) changes indicator.
    */
   gentime: number;

   /**
    * Archive flag. Always true for this structure.
    */
   isArchive: boolean;

}

/**
 * Chat (direct, group, task) representaion.
 */
export interface Chat {
   /**
    * Group/Task/Contact id.
    */
   jid: JID;

   /**
    * Chat type.
    */
   chatType: ChatType;

   /**
    * Base fields (not related to concrete participant) changes indicator. Omitempty.
    */
   baseGentime: number;

   /**
    * Chat fields (related to concrete participan) changes indicator.
    */
   gentime: number;

   /**
    * Creation date, iso datetime.
    */
   created: string;

   /**
    * Title.
    */
   displayName: string;

   /**
    * Icons info.
    */
   icons: IconData | null;

   /**
    * Include unread messages to counters. Omitempty.
    */
   countersEnabled: boolean;

   /**
    * Can I call to this chat. Omitempty.
    */
   canCall: boolean;

   /**
    * Can I send message to this chat. Omitempty.
    */
   canSendMessage: boolean;

   /**
    * Why I can't send message to this chat (if can't). Omitempty.
    */
   cantSendMessageReason: string;

   /**
    * Description collapsed. Used for tasks only. Omitempty.
    */
   collapsed: boolean;

   /**
    * Last message draft, if any. Omitempty.
    */
   draft: string;

   /**
    * Last message draft version , if any. Omitempty.
    */
   draftNum: number;

   /**
    * Hidden chat. Omitempty.
    */
   hidden: boolean;

   /**
    * Push notifications enabled. Omitempty.
    */
   notificationsEnabled: boolean;

   /**
    * Number of importants messages. Omitempty.
    */
   numImportants: number;

   /**
    * Unreads conuter. Omitempty.
    */
   numUnread: number;

   /**
    * Mentions (@) counter. Omitempty.
    */
   numUnreadNotices: number;

   /**
    * Last message object. Omitempty.
    */
   lastMessage: Message | null;

   /**
    * Last read message id, if any. Omitempty.
    */
   lastReadMessageId: string;

   /**
    * Project / section id, if any. Omitempty.
    */
   section: string;

   /**
    * List of editable fields. Omitempty.
    */
   changeableFields: string[];

   /**
    * Is chat pinned on top. Omitempty.
    */
   pinned: boolean;

   /**
    * Sort oreding for pinned chat. Omitempty.
    */
   pinnedSortOrdering: number;

   /**
    * Non-archive participants number. Omitempty.
    */
   numMembers: number | null;

   /**
    * Can I delete this chat. Omitempty.
    */
   canDelete: boolean;

   /**
    * Group or task description. Omitempty.
    */
   description: string;

   /**
    * Present in feed (main screen). Omitempty.
    */
   feed: boolean;

   /**
    * Pinned message for this chat. Omitempty.
    */
   pinnedMessage: Message | null;

   /**
    * Custom color index from table of colors. Tasks only. Omitempty.
    */
   colorIndex: uint16 | null;

   /**
    * Items in checklist. Tasks only. Omitempty.
    */
   numItems: number | null;

   /**
    * Checked items in checklist. Tasks only. Omitempty.
    */
   numCheckedItems: number | null;

   /**
    * Assignee contact id. Tasks only. Omitempty.
    */
   assignee: JID | null;

   /**
    * Task number in this team. Omitempty.
    */
   num: number;

   /**
    * Task observers id's. Omitempty.
    */
   observers: JID[] | null;

   /**
    * Task creator. Omitempty.
    */
   owner: JID | null;

   /**
    * Task status. May be custom. Omitempty.
    */
   taskStatus: string;

   /**
    * Task title. Generated from number and description. Omitempty.
    */
   title: string;

   /**
    * Task done date in iso format, if any. Omitempty.
    */
   done: string;

   /**
    * Task done reason, if any. Omitempty.
    */
   doneReason: string;

   /**
    * Task deadline in iso format, if any. Omitempty.
    */
   deadline: string;

   /**
    * Is task deadline expired. Omitempty.
    */
   deadlineExpired: boolean;

   /**
    * Links in description. Omitempty.
    */
   links: MessageLinks;

   /**
    * Task tags list, if any. Omitempty.
    */
   tags: string[];

   /**
    * Task importance, if available in team. Omitempty.
    */
   importance: number | null;

   /**
    * Task urgency, if available in team. Omitempty.
    */
   urgency: number | null;

   /**
    * Task spent time, number. Omitempty.
    */
   spentTime: number | null;

   /**
    * Task complexity, number. Omitempty.
    */
   complexity: number | null;

   /**
    * Used for "Create task from messages...". Omitempty.
    */
   linkedMessages: interface{}[];

   /**
    * Checklist items. Task only. Omitempty.
    */
   items: TaskItem[];

   /**
    * Parent tasks. Omitempty.
    */
   parents: Subtask[];

   /**
    * Tab names. Omitempty.
    */
   tabs: TaskTabKey[] | null;

   /**
    * My status in group chat. Omitempty.
    */
   status: GroupStatus;

   /**
    * Group chat members. Omitempty.
    */
   members: GroupMembership[];

   /**
    * Can I add member to this group chat. Omitempty.
    */
   canAddMember: boolean;

   /**
    * Can I remove member from this group chat. Omitempty.
    */
   canRemoveMember: boolean;

   /**
    * Can I change member status in this group chat. Omitempty.
    */
   canChangeMemberStatus: boolean;

   /**
    * deprecated: use changeable fields. Omitempty.
    */
   canChangeSettings: boolean;

   /**
    * Any new team member will be added to this group chat. Omitempty.
    */
   defaultForAll: boolean;

   /**
    * Readonly for non-admins group chat (Like Channels in Telegram bug switchable). Omitempty.
    */
   readonlyForMembers: boolean;

   /**
    * Delete messages in this chat in seconds. Experemental function. Omitempty.
    */
   autocleanupAge: number | null;

   /**
    * Can other team member see this task/group chat. Omitempty.
    */
   public: boolean;

   /**
    * Can I join to this public group/task. Omitempty.
    */
   canJoin: boolean;

   /**
    * Can I delete any message in this chat. Omitempty.
    */
   canDeleteAnyMessage: boolean | null;

   /**
    * Can I change Important flag in any message in this chat. Omitempty.
    */
   canSetImportantAnyMessage: boolean | null;

}

/**
 * Link to sub/sup task.
 */
export interface Subtask {
   /**
    * Task id.
    */
   jid: JID;

   /**
    * Assignee contact id. Tasks only.
    */
   assignee: JID;

   /**
    * Task title. Generated from number and description.
    */
   title: string;

   /**
    * Task number in this team.
    */
   num: number;

   /**
    * Title.
    */
   displayName: string;

   /**
    * Can other team member see this task/group chat. Omitempty.
    */
   public: boolean;

}

/**
 * Task checklist item.
 */
export interface TaskItem {
   /**
    * Id. Omitempty.
    */
   uid: string;

   /**
    * Sort ordering. Omitempty.
    */
   sortOrdering: number;

   /**
    * Text or "#{OtherTaskNumber}".
    */
   text: string;

   /**
    * Item checked. Omitempty.
    */
   checked: boolean;

   /**
    * Can I toggle this item. Omitempty.
    */
   canToggle: boolean;

   /**
    * Link to subtask. Optional. Omitempty.
    */
   subtask: Subtask | null;

}

/**
 * Group chat membership status.
 */
export interface GroupMembership {
   /**
    * Contact id.
    */
   jid: JID;

   /**
    * Status in group.
    */
   status: GroupStatus;

   /**
    * Can I remove this member. Omitempty.
    */
   canRemove: boolean;

}

/**
 * Uploaded media.
 */
export interface Upload {
   /**
    * Upload id.
    */
   uid: string;

   /**
    * Upload size in bytes.
    */
   size: number;

   /**
    * Mediafile duration (for audio/video only). Omitempty.
    */
   duration: number;

   /**
    * Filename.
    */
   name: string;

   /**
    * Absolute url.
    */
   url: string;

   /**
    * Preview details. Omitempty.
    */
   preview: UploadPreview | null;

   /**
    * Content type.
    */
   contentType: string;

   /**
    * Is animated (images only). Omitempty.
    */
   animated: boolean;

   /**
    * File still processing (video only). Omitempty.
    */
   processing: boolean;

   /**
    * PDF version of file. Experimental. Omitempty.
    */
   pdfVersion: PdfVersion | null;

}

/**
 * Upload preview.
 */
export interface UploadPreview {
   /**
    * Absolute url to image.
    */
   url: string;

   /**
    * Absolute url to high resolution image (retina).
    */
   url2x: string;

   /**
    * Width in pixels.
    */
   width: number;

   /**
    * Height in pixels.
    */
   height: number;

}

/**
 * {hostname}/features.js / {hostname}/features.json structure.
 */
export interface Features {
   /**
    * Current host.
    */
   host: string;

   /**
    * Build/revision of server side.
    */
   build: string;

   /**
    * Desktop application version.
    */
   desktopVersion: string;

   /**
    * Webclient version.
    */
   frontVersion: string;

   /**
    * Application title.
    */
   appTitle: string;

   /**
    * Static files server address.
    */
   userver: string;

   /**
    * Link to AppStore.
    */
   iOSApp: string;

   /**
    * Link to Google Play.
    */
   androidApp: string;

   /**
    * Default UI theme.
    */
   theme: string;

   /**
    * Minimal application version required for this server. Used for breaking changes.
    */
   minAppVersion: string;

   /**
    * Free registration allowed.
    */
   freeRegistration: boolean;

   /**
    * Maximum size of user's upload.
    */
   maxUploadMb: number;

   /**
    * Maximum number of forwarded messages.
    */
   maxLinkedMessages: number;

   /**
    * Maximum chars for: family_name, given_name, patronymic if any.
    */
   maxUsernamePartLength: number;

   /**
    * Maximum chars for group chat name.
    */
   maxGroupTitleLength: number;

   /**
    * Maximum chars for role in team.
    */
   maxRoleLength: number;

   /**
    * Maximum chars for mood in team.
    */
   maxMoodLength: number;

   /**
    * Maximum chars for text message.
    */
   maxMessageLength: number;

   /**
    * Maximum length for project and contact's sections names.
    */
   maxSectionLength: number;

   /**
    * Maximum length for tags.
    */
   maxTagLength: number;

   /**
    * Maximum length for task title.
    */
   maxTaskTitleLength: number;

   /**
    * Maximum teams for one account.
    */
   maxTeams: number;

   /**
    * Max inactivity seconds.
    */
   afkAge: number;

   /**
    * Password authentication enabled. Omitempty.
    */
   authByPassword: boolean;

   /**
    * QR-code / link authentication enabled. Omitempty.
    */
   authByQrCode: boolean;

   /**
    * SMS authentication enabled. Omitempty.
    */
   authBySms: boolean;

   /**
    * ICE servers for WebRTC.
    */
   iCEServers: ICEServer[];

   /**
    * True for onpremise installation.
    */
   customServer: boolean;

   /**
    * Name of instalation.
    */
   installationType: string;

   /**
    * Testing installation.
    */
   isTesting: boolean;

   /**
    * Yandex metrika counter id.
    */
   metrika: string;

   /**
    * Minimal chars number for starting global search.
    */
   minSearchLength: number;

   /**
    * Resend message in n seconds if no confirmation from server given.
    */
   resendTimeout: number;

   /**
    * Frontent sentry.io settings.
    */
   sentryDsnJS: string;

   /**
    * Message drafts saved on server.
    */
   serverDrafts: boolean;

   /**
    * Firebase application id for web-push notifacations.
    */
   firebaseAppId: string;

   /**
    * Firebase sender id for web-push notifacations.
    */
   firebaseSenderId: string;

   /**
    * Calls functions enabled.
    */
   calls: boolean;

   /**
    * Calls functions enabled for mobile applications.
    */
   mobileCalls: boolean;

   /**
    * Calls record enabled.
    */
   callsRecord: boolean;

   /**
    * Disallow call from multiply devices. Experimental. Omitempty.
    */
   onlyOneDevicePerCall: boolean;

   /**
    * Maximum number of participants per call. Omitempty.
    */
   maxParticipantsPerCall: number;

   /**
    * Safari push id for web-push notifacations.
    */
   safariPushId: string;

   /**
    * Team entity naming. Experimental.
    */
   terms: Terms;

   /**
    * Cross team communication. Experimental.
    */
   singleGroupTeams: boolean;

   /**
    * Wiki pages in chats. Experimental.
    */
   wikiPages: boolean;

   /**
    * Wiki pages in chats. Experimental. Omitempty.
    */
   allowAdminMute: boolean;

   /**
    * Deprecated.
    */
   taskChecklist: boolean;

   /**
    * Deprecated.
    */
   readonlyGroups: boolean;

   /**
    * Deprecated.
    */
   taskDashboard: boolean;

   /**
    * Deprecated.
    */
   taskMessages: boolean;

   /**
    * Deprecated.
    */
   taskPublic: boolean;

   /**
    * Deprecated.
    */
   taskTags: boolean;

}
